import React, { useState, useEffect } from 'react';
import {
  IconButton,
  Box,
  Paper,
  Typography,
  Button,
  Grid,
  Card,
  CardContent,
  TextField,
  Switch,
  FormControlLabel,
  Divider,
  Stack,
  Alert,
  Snackbar,
  Avatar,
  Tooltip,
  Fade,
  Zoom,
  Tabs,
  Tab,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Slider,
  Chip,
} from '@mui/material';
import {
  Settings as SettingsIcon,
  Save as SaveIcon,
  Refresh as RefreshIcon,
  Security as SecurityIcon,
  Notifications as NotificationsIcon,
  Palette as PaletteIcon,
  Language as LanguageIcon,
  Storage as StorageIcon,
  CloudUpload as CloudUploadIcon,
  Download as DownloadIcon,
  Restore as RestoreIcon,
  CheckCircle as CheckCircleIcon,
  Warning as WarningIcon,
  Info as InfoIcon,
} from '@mui/icons-material';
import ResponsiveContainer from '../../components/common/ResponsiveContainer';
import LoadingSpinner from '../../components/common/LoadingSpinner';

const Settings = () => {
  const [loading, setLoading] = useState(false);
  const [selectedTab, setSelectedTab] = useState(0);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });

  // Settings states
  const [generalSettings, setGeneralSettings] = useState({
    hotelName: 'BinBer Hotel',
    hotelAddress: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM',
    hotelPhone: '+84 123 456 789',
    hotelEmail: 'info@binber.com',
    currency: 'VND',
    timezone: 'Asia/Ho_Chi_Minh',
    language: 'vi',
  });

  const [securitySettings, setSecuritySettings] = useState({
    sessionTimeout: 30,
    passwordMinLength: 8,
    requireTwoFactor: false,
    allowGuestAccess: true,
    maxLoginAttempts: 5,
  });

  const [notificationSettings, setNotificationSettings] = useState({
    emailNotifications: true,
    smsNotifications: false,
    pushNotifications: true,
    bookingConfirmations: true,
    paymentReminders: true,
    maintenanceAlerts: true,
  });

  const [themeSettings, setThemeSettings] = useState({
    primaryColor: '#3b82f6',
    secondaryColor: '#10b981',
    darkMode: false,
    animations: true,
    compactMode: false,
  });

  const tabs = [
    { label: 'C√†i ƒë·∫∑t chung', value: 'general', icon: <SettingsIcon /> },
    { label: 'B·∫£o m·∫≠t', value: 'security', icon: <SecurityIcon /> },
    { label: 'Th√¥ng b√°o', value: 'notifications', icon: <NotificationsIcon /> },
    { label: 'Giao di·ªán', value: 'theme', icon: <PaletteIcon /> },
    { label: 'H·ªá th·ªëng', value: 'system', icon: <StorageIcon /> },
  ];

  const showSnackbar = (message, severity = 'success') => {
    setSnackbar({ open: true, message, severity });
  };

  const handleCloseSnackbar = () => {
    setSnackbar({ ...snackbar, open: false });
  };

  const handleSaveSettings = async (settingsType) => {
    setLoading(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      showSnackbar(`C·∫≠p nh·∫≠t ${settingsType} th√†nh c√¥ng!`);
    } catch (error) {
      showSnackbar('L·ªói khi c·∫≠p nh·∫≠t c√†i ƒë·∫∑t', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleResetSettings = () => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën reset t·∫•t c·∫£ c√†i ƒë·∫∑t v·ªÅ m·∫∑c ƒë·ªãnh?')) {
      showSnackbar('Reset c√†i ƒë·∫∑t th√†nh c√¥ng!');
    }
  };

  const handleExportSettings = () => {
    showSnackbar('Xu·∫•t c√†i ƒë·∫∑t th√†nh c√¥ng!');
  };

  const handleImportSettings = () => {
    showSnackbar('Nh·∫≠p c√†i ƒë·∫∑t th√†nh c√¥ng!');
  };

  return (
    <ResponsiveContainer>
      {/* Header */}
      <Fade in={true}>
        <Box sx={{ mb: 4 }}>
          <Box display="flex" justifyContent="space-between" alignItems="center" sx={{ mb: 2 }}>
            <Box>
              <Typography 
                variant="h3" 
                component="h1" 
                gutterBottom 
                sx={{
                  background: 'linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%)',
                  backgroundClip: 'text',
                  WebkitBackgroundClip: 'text',
                  WebkitTextFillColor: 'transparent',
                  fontWeight: 700,
                  '@media (max-width:600px)': {
                    fontSize: '2rem',
                  },
                }}
              >
                ‚öôÔ∏è C√†i ƒë·∫∑t H·ªá th·ªëng
              </Typography>
              <Typography variant="h6" color="text.secondary" gutterBottom>
                C·∫•u h√¨nh v√† qu·∫£n l√Ω c√°c thi·∫øt l·∫≠p c·ªßa h·ªá th·ªëng
              </Typography>
            </Box>
            
            {/* Action Buttons */}
            <Stack direction="row" spacing={1}>
              <Tooltip title="Reset c√†i ƒë·∫∑t">
                <IconButton
                  onClick={handleResetSettings}
                  sx={{
                    background: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
                    color: 'white',
                    '&:hover': {
                      background: 'linear-gradient(135deg, #d97706 0%, #b45309 100%)',
                    },
                  }}
                >
                  <RestoreIcon />
                </IconButton>
              </Tooltip>
              <Tooltip title="Xu·∫•t c√†i ƒë·∫∑t">
                <IconButton
                  onClick={handleExportSettings}
                  sx={{
                    background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                    color: 'white',
                    '&:hover': {
                      background: 'linear-gradient(135deg, #059669 0%, #047857 100%)',
                    },
                  }}
                >
                  <DownloadIcon />
                </IconButton>
              </Tooltip>
              <Tooltip title="Nh·∫≠p c√†i ƒë·∫∑t">
                <IconButton
                  onClick={handleImportSettings}
                  sx={{
                    background: 'linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%)',
                    color: 'white',
                    '&:hover': {
                      background: 'linear-gradient(135deg, #7c3aed 0%, #6d28d9 100%)',
                    },
                  }}
                >
                  <CloudUploadIcon />
                </IconButton>
              </Tooltip>
            </Stack>
          </Box>
        </Box>
      </Fade>

      {/* Tabs */}
      <Fade in={true} style={{ transitionDelay: '100ms' }}>
        <Paper sx={{ 
          mb: 3,
          background: 'linear-gradient(135deg, #ffffff 0%, #f8fafc 100%)',
          border: '1px solid #e2e8f0',
          borderRadius: 2,
        }}>
          <Tabs 
            value={selectedTab} 
            onChange={(e, newValue) => setSelectedTab(newValue)}
            variant="scrollable"
            scrollButtons="auto"
            sx={{
              '& .MuiTab-root': {
                fontWeight: 600,
                '&.Mui-selected': {
                  color: '#3b82f6',
                },
              },
              '& .MuiTabs-indicator': {
                background: 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)',
                height: 3,
              },
            }}
          >
            {tabs.map((tab, index) => (
              <Tab 
                key={tab.value}
                label={tab.label}
                icon={tab.icon}
                iconPosition="start"
              />
            ))}
          </Tabs>
        </Paper>
      </Fade>

      {/* General Settings Tab */}
      {selectedTab === 0 && (
        <Fade in={true} style={{ transitionDelay: '200ms' }}>
          <Paper sx={{ 
            p: 4,
            background: 'linear-gradient(135deg, #ffffff 0%, #f8fafc 100%)',
            border: '1px solid #e2e8f0',
            borderRadius: 3,
          }}>
            <Typography variant="h6" gutterBottom sx={{ fontWeight: 600, mb: 3 }}>
              üè® Th√¥ng tin kh√°ch s·∫°n
            </Typography>
            <Grid container spacing={3}>
              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  label="T√™n kh√°ch s·∫°n"
                  value={generalSettings.hotelName}
                  onChange={(e) => setGeneralSettings({...generalSettings, hotelName: e.target.value})}
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      '&:hover fieldset': {
                        borderColor: '#3b82f6',
                      },
                      '&.Mui-focused fieldset': {
                        borderColor: '#3b82f6',
                      },
                    },
                  }}
                />
              </Grid>
              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  label="ƒê·ªãa ch·ªâ"
                  value={generalSettings.hotelAddress}
                  onChange={(e) => setGeneralSettings({...generalSettings, hotelAddress: e.target.value})}
                />
              </Grid>
              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  label="S·ªë ƒëi·ªán tho·∫°i"
                  value={generalSettings.hotelPhone}
                  onChange={(e) => setGeneralSettings({...generalSettings, hotelPhone: e.target.value})}
                />
              </Grid>
              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  label="Email"
                  type="email"
                  value={generalSettings.hotelEmail}
                  onChange={(e) => setGeneralSettings({...generalSettings, hotelEmail: e.target.value})}
                />
              </Grid>
              <Grid item xs={12} md={6}>
                <FormControl fullWidth>
                  <InputLabel>Ti·ªÅn t·ªá</InputLabel>
                  <Select
                    value={generalSettings.currency}
                    onChange={(e) => setGeneralSettings({...generalSettings, currency: e.target.value})}
                    label="Ti·ªÅn t·ªá"
                  >
                    <MenuItem value="VND">VND (Vi·ªát Nam ƒê·ªìng)</MenuItem>
                    <MenuItem value="USD">USD (US Dollar)</MenuItem>
                    <MenuItem value="EUR">EUR (Euro)</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={12} md={6}>
                <FormControl fullWidth>
                  <InputLabel>M√∫i gi·ªù</InputLabel>
                  <Select
                    value={generalSettings.timezone}
                    onChange={(e) => setGeneralSettings({...generalSettings, timezone: e.target.value})}
                    label="M√∫i gi·ªù"
                  >
                    <MenuItem value="Asia/Ho_Chi_Minh">Asia/Ho_Chi_Minh</MenuItem>
                    <MenuItem value="UTC">UTC</MenuItem>
                    <MenuItem value="America/New_York">America/New_York</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
            </Grid>
            <Box sx={{ mt: 4, display: 'flex', justifyContent: 'flex-end' }}>
              <Button
                variant="contained"
                startIcon={<SaveIcon />}
                onClick={() => handleSaveSettings('c√†i ƒë·∫∑t chung')}
                disabled={loading}
                sx={{
                  background: 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)',
                  '&:hover': {
                    background: 'linear-gradient(135deg, #1d4ed8 0%, #1e40af 100%)',
                  },
                }}
              >
                L∆∞u c√†i ƒë·∫∑t
              </Button>
            </Box>
          </Paper>
        </Fade>
      )}

      {/* Security Settings Tab */}
      {selectedTab === 1 && (
        <Fade in={true} style={{ transitionDelay: '200ms' }}>
          <Paper sx={{ 
            p: 4,
            background: 'linear-gradient(135deg, #ffffff 0%, #f8fafc 100%)',
            border: '1px solid #e2e8f0',
            borderRadius: 3,
          }}>
            <Typography variant="h6" gutterBottom sx={{ fontWeight: 600, mb: 3 }}>
              üîí B·∫£o m·∫≠t h·ªá th·ªëng
            </Typography>
            <Grid container spacing={3}>
              <Grid item xs={12} md={6}>
                <Typography variant="subtitle2" gutterBottom>
                  Th·ªùi gian timeout phi√™n (ph√∫t): {securitySettings.sessionTimeout}
                </Typography>
                <Slider
                  value={securitySettings.sessionTimeout}
                  onChange={(e, newValue) => setSecuritySettings({...securitySettings, sessionTimeout: newValue})}
                  min={5}
                  max={120}
                  step={5}
                  sx={{
                    color: '#3b82f6',
                    '& .MuiSlider-thumb': {
                      background: 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)',
                    },
                  }}
                />
              </Grid>
              <Grid item xs={12} md={6}>
                <Typography variant="subtitle2" gutterBottom>
                  ƒê·ªô d√†i m·∫≠t kh·∫©u t·ªëi thi·ªÉu: {securitySettings.passwordMinLength}
                </Typography>
                <Slider
                  value={securitySettings.passwordMinLength}
                  onChange={(e, newValue) => setSecuritySettings({...securitySettings, passwordMinLength: newValue})}
                  min={6}
                  max={20}
                  step={1}
                  sx={{
                    color: '#10b981',
                    '& .MuiSlider-thumb': {
                      background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                    },
                  }}
                />
              </Grid>
              <Grid item xs={12}>
                <FormControlLabel
                  control={
                    <Switch
                      checked={securitySettings.requireTwoFactor}
                      onChange={(e) => setSecuritySettings({...securitySettings, requireTwoFactor: e.target.checked})}
                      sx={{
                        '& .MuiSwitch-switchBase.Mui-checked': {
                          color: '#3b82f6',
                        },
                        '& .MuiSwitch-switchBase.Mui-checked + .MuiSwitch-track': {
                          backgroundColor: '#3b82f6',
                        },
                      }}
                    />
                  }
                  label="Y√™u c·∫ßu x√°c th·ª±c 2 y·∫øu t·ªë"
                />
              </Grid>
              <Grid item xs={12}>
                <FormControlLabel
                  control={
                    <Switch
                      checked={securitySettings.allowGuestAccess}
                      onChange={(e) => setSecuritySettings({...securitySettings, allowGuestAccess: e.target.checked})}
                    />
                  }
                  label="Cho ph√©p truy c·∫≠p kh√°ch"
                />
              </Grid>
            </Grid>
            <Box sx={{ mt: 4, display: 'flex', justifyContent: 'flex-end' }}>
              <Button
                variant="contained"
                startIcon={<SaveIcon />}
                onClick={() => handleSaveSettings('b·∫£o m·∫≠t')}
                disabled={loading}
                sx={{
                  background: 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)',
                  '&:hover': {
                    background: 'linear-gradient(135deg, #1d4ed8 0%, #1e40af 100%)',
                  },
                }}
              >
                L∆∞u c√†i ƒë·∫∑t
              </Button>
            </Box>
          </Paper>
        </Fade>
      )}

      {/* Notification Settings Tab */}
      {selectedTab === 2 && (
        <Fade in={true} style={{ transitionDelay: '200ms' }}>
          <Paper sx={{ 
            p: 4,
            background: 'linear-gradient(135deg, #ffffff 0%, #f8fafc 100%)',
            border: '1px solid #e2e8f0',
            borderRadius: 3,
          }}>
            <Typography variant="h6" gutterBottom sx={{ fontWeight: 600, mb: 3 }}>
              üîî C√†i ƒë·∫∑t th√¥ng b√°o
            </Typography>
            <Grid container spacing={3}>
              <Grid item xs={12} md={6}>
                <FormControlLabel
                  control={
                    <Switch
                      checked={notificationSettings.emailNotifications}
                      onChange={(e) => setNotificationSettings({...notificationSettings, emailNotifications: e.target.checked})}
                    />
                  }
                  label="Th√¥ng b√°o qua Email"
                />
              </Grid>
              <Grid item xs={12} md={6}>
                <FormControlLabel
                  control={
                    <Switch
                      checked={notificationSettings.smsNotifications}
                      onChange={(e) => setNotificationSettings({...notificationSettings, smsNotifications: e.target.checked})}
                    />
                  }
                  label="Th√¥ng b√°o qua SMS"
                />
              </Grid>
              <Grid item xs={12} md={6}>
                <FormControlLabel
                  control={
                    <Switch
                      checked={notificationSettings.pushNotifications}
                      onChange={(e) => setNotificationSettings({...notificationSettings, pushNotifications: e.target.checked})}
                    />
                  }
                  label="Th√¥ng b√°o Push"
                />
              </Grid>
              <Grid item xs={12} md={6}>
                <FormControlLabel
                  control={
                    <Switch
                      checked={notificationSettings.bookingConfirmations}
                      onChange={(e) => setNotificationSettings({...notificationSettings, bookingConfirmations: e.target.checked})}
                    />
                  }
                  label="X√°c nh·∫≠n ƒë·∫∑t ph√≤ng"
                />
              </Grid>
              <Grid item xs={12} md={6}>
                <FormControlLabel
                  control={
                    <Switch
                      checked={notificationSettings.paymentReminders}
                      onChange={(e) => setNotificationSettings({...notificationSettings, paymentReminders: e.target.checked})}
                    />
                  }
                  label="Nh·∫Øc nh·ªü thanh to√°n"
                />
              </Grid>
              <Grid item xs={12} md={6}>
                <FormControlLabel
                  control={
                    <Switch
                      checked={notificationSettings.maintenanceAlerts}
                      onChange={(e) => setNotificationSettings({...notificationSettings, maintenanceAlerts: e.target.checked})}
                    />
                  }
                  label="C·∫£nh b√°o b·∫£o tr√¨"
                />
              </Grid>
            </Grid>
            <Box sx={{ mt: 4, display: 'flex', justifyContent: 'flex-end' }}>
              <Button
                variant="contained"
                startIcon={<SaveIcon />}
                onClick={() => handleSaveSettings('th√¥ng b√°o')}
                disabled={loading}
                sx={{
                  background: 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)',
                  '&:hover': {
                    background: 'linear-gradient(135deg, #1d4ed8 0%, #1e40af 100%)',
                  },
                }}
              >
                L∆∞u c√†i ƒë·∫∑t
              </Button>
            </Box>
          </Paper>
        </Fade>
      )}

      {/* Theme Settings Tab */}
      {selectedTab === 3 && (
        <Fade in={true} style={{ transitionDelay: '200ms' }}>
          <Paper sx={{ 
            p: 4,
            background: 'linear-gradient(135deg, #ffffff 0%, #f8fafc 100%)',
            border: '1px solid #e2e8f0',
            borderRadius: 3,
          }}>
            <Typography variant="h6" gutterBottom sx={{ fontWeight: 600, mb: 3 }}>
              üé® C√†i ƒë·∫∑t giao di·ªán
            </Typography>
            <Grid container spacing={3}>
              <Grid item xs={12} md={6}>
                <Typography variant="subtitle2" gutterBottom>
                  M√†u ch·ªß ƒë·∫°o
                </Typography>
                <Stack direction="row" spacing={1}>
                  <Chip 
                    label="Xanh d∆∞∆°ng" 
                    onClick={() => setThemeSettings({...themeSettings, primaryColor: '#3b82f6'})}
                    sx={{
                      background: themeSettings.primaryColor === '#3b82f6' ? '#3b82f6' : 'transparent',
                      color: themeSettings.primaryColor === '#3b82f6' ? 'white' : 'inherit',
                    }}
                  />
                  <Chip 
                    label="Xanh l√°" 
                    onClick={() => setThemeSettings({...themeSettings, primaryColor: '#10b981'})}
                    sx={{
                      background: themeSettings.primaryColor === '#10b981' ? '#10b981' : 'transparent',
                      color: themeSettings.primaryColor === '#10b981' ? 'white' : 'inherit',
                    }}
                  />
                  <Chip 
                    label="T√≠m" 
                    onClick={() => setThemeSettings({...themeSettings, primaryColor: '#8b5cf6'})}
                    sx={{
                      background: themeSettings.primaryColor === '#8b5cf6' ? '#8b5cf6' : 'transparent',
                      color: themeSettings.primaryColor === '#8b5cf6' ? 'white' : 'inherit',
                    }}
                  />
                </Stack>
              </Grid>
              <Grid item xs={12} md={6}>
                <FormControlLabel
                  control={
                    <Switch
                      checked={themeSettings.darkMode}
                      onChange={(e) => setThemeSettings({...themeSettings, darkMode: e.target.checked})}
                    />
                  }
                  label="Ch·∫ø ƒë·ªô t·ªëi"
                />
              </Grid>
              <Grid item xs={12} md={6}>
                <FormControlLabel
                  control={
                    <Switch
                      checked={themeSettings.animations}
                      onChange={(e) => setThemeSettings({...themeSettings, animations: e.target.checked})}
                    />
                  }
                  label="Hi·ªáu ·ª©ng chuy·ªÉn ƒë·ªông"
                />
              </Grid>
              <Grid item xs={12} md={6}>
                <FormControlLabel
                  control={
                    <Switch
                      checked={themeSettings.compactMode}
                      onChange={(e) => setThemeSettings({...themeSettings, compactMode: e.target.checked})}
                    />
                  }
                  label="Ch·∫ø ƒë·ªô compact"
                />
              </Grid>
            </Grid>
            <Box sx={{ mt: 4, display: 'flex', justifyContent: 'flex-end' }}>
              <Button
                variant="contained"
                startIcon={<SaveIcon />}
                onClick={() => handleSaveSettings('giao di·ªán')}
                disabled={loading}
                sx={{
                  background: 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)',
                  '&:hover': {
                    background: 'linear-gradient(135deg, #1d4ed8 0%, #1e40af 100%)',
                  },
                }}
              >
                L∆∞u c√†i ƒë·∫∑t
              </Button>
            </Box>
          </Paper>
        </Fade>
      )}

      {/* System Settings Tab */}
      {selectedTab === 4 && (
        <Fade in={true} style={{ transitionDelay: '200ms' }}>
          <Paper sx={{ 
            p: 4,
            background: 'linear-gradient(135deg, #ffffff 0%, #f8fafc 100%)',
            border: '1px solid #e2e8f0',
            borderRadius: 3,
          }}>
            <Typography variant="h6" gutterBottom sx={{ fontWeight: 600, mb: 3 }}>
              üíæ C√†i ƒë·∫∑t h·ªá th·ªëng
            </Typography>
            <Grid container spacing={3}>
              <Grid item xs={12} md={6}>
                <Card sx={{ p: 2, background: 'linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)' }}>
                  <Typography variant="subtitle1" fontWeight="600" gutterBottom>
                    üìä Th·ªëng k√™ h·ªá th·ªëng
                  </Typography>
                  <Stack spacing={1}>
                    <Box display="flex" justifyContent="space-between">
                      <Typography variant="body2">Phi√™n b·∫£n:</Typography>
                      <Typography variant="body2" fontWeight="bold">v2.0.0</Typography>
                    </Box>
                    <Box display="flex" justifyContent="space-between">
                      <Typography variant="body2">C·∫≠p nh·∫≠t cu·ªëi:</Typography>
                      <Typography variant="body2" fontWeight="bold">15/12/2024</Typography>
                    </Box>
                    <Box display="flex" justifyContent="space-between">
                      <Typography variant="body2">Dung l∆∞·ª£ng DB:</Typography>
                      <Typography variant="body2" fontWeight="bold">2.5 GB</Typography>
                    </Box>
                  </Stack>
                </Card>
              </Grid>
              <Grid item xs={12} md={6}>
                <Card sx={{ p: 2, background: 'linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)' }}>
                  <Typography variant="subtitle1" fontWeight="600" gutterBottom>
                    üîß B·∫£o tr√¨ h·ªá th·ªëng
                  </Typography>
                  <Stack spacing={2}>
                    <Button
                      variant="outlined"
                      fullWidth
                      startIcon={<RefreshIcon />}
                      onClick={() => showSnackbar('L√†m m·ªõi cache th√†nh c√¥ng!')}
                    >
                      L√†m m·ªõi Cache
                    </Button>
                    <Button
                      variant="outlined"
                      fullWidth
                      startIcon={<StorageIcon />}
                      onClick={() => showSnackbar('T·ªëi ∆∞u database th√†nh c√¥ng!')}
                    >
                      T·ªëi ∆∞u Database
                    </Button>
                  </Stack>
                </Card>
              </Grid>
            </Grid>
          </Paper>
        </Fade>
      )}

      {/* Snackbar */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      >
        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </ResponsiveContainer>
  );
};

export default Settings;
