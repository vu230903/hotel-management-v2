const express = require('express');
const { body, validationResult } = require('express-validator');
const Booking = require('../models/Booking');
const Room = require('../models/Room');
const User = require('../models/User');
const { authenticate, requireStaff, requireAdmin } = require('../middleware/auth');

const router = express.Router();

// Test endpoint
router.get('/test', (req, res) => {
  res.json({ message: 'Bookings API is working!' });
});

// @route   GET /api/bookings
// @desc    L·∫•y danh s√°ch ƒë·∫∑t ph√≤ng
// @access  Private
router.get('/', authenticate, async (req, res) => {
  try {
    const { 
      page = 1, 
      limit = 10, 
      status, 
      checkIn, 
      checkOut,
      customer,
      room
    } = req.query;
    
    // T·∫°o filter
    const filter = {};
    
    // Kh√°ch h√†ng ch·ªâ xem ƒë∆∞·ª£c booking c·ªßa m√¨nh
    if (req.user.role === 'customer') {
      filter.customer = req.user._id;
    }
    
    if (status) {
      filter.status = status;
    }
    
    if (customer && req.user.role !== 'customer') {
      filter.customer = customer;
    }
    
    if (room) {
      filter.room = room;
    }
    
    if (checkIn) {
      filter.checkIn = { $gte: new Date(checkIn) };
    }
    
    if (checkOut) {
      filter.checkOut = { $lte: new Date(checkOut) };
    }
    
    // T√≠nh pagination
    const skip = (parseInt(page) - 1) * parseInt(limit);
    
    const bookings = await Booking.find(filter)
      .populate('customer', 'fullName email phone')
      .populate('room', 'roomNumber roomType basePrice floor')
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit));
    
    const total = await Booking.countDocuments(filter);
    
    res.json({
      success: true,
      data: {
        bookings,
        pagination: {
          current: parseInt(page),
          pages: Math.ceil(total / parseInt(limit)),
          total
        }
      }
    });
    
  } catch (error) {
    console.error('Get bookings error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi l·∫•y danh s√°ch ƒë·∫∑t ph√≤ng'
    });
  }
});

// @route   GET /api/bookings/:id
// @desc    L·∫•y th√¥ng tin ƒë·∫∑t ph√≤ng theo ID
// @access  Private
router.get('/:id', authenticate, async (req, res) => {
  try {
    const booking = await Booking.findById(req.params.id)
      .populate('customer', 'fullName email phone address')
      .populate('room', 'roomNumber roomType basePrice floor amenities')
      .populate('additionalServices.service', 'name price category');
    
    if (!booking) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ph√≤ng'
      });
    }
    
    // Kh√°ch h√†ng ch·ªâ xem ƒë∆∞·ª£c booking c·ªßa m√¨nh
    if (req.user.role === 'customer' && booking.customer._id.toString() !== req.user._id.toString()) {
      return res.status(403).json({
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem ƒë·∫∑t ph√≤ng n√†y'
      });
    }
    
    res.json({
      success: true,
      data: { booking }
    });
    
  } catch (error) {
    console.error('Get booking error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi l·∫•y th√¥ng tin ƒë·∫∑t ph√≤ng'
    });
  }
});

// @route   POST /api/bookings
// @desc    T·∫°o ƒë·∫∑t ph√≤ng m·ªõi
// @access  Private
router.post('/', [
  authenticate,
  body('customer')
    .optional()
    .isMongoId()
    .withMessage('ID kh√°ch h√†ng kh√¥ng h·ª£p l·ªá'),
  body('room')
    .isMongoId()
    .withMessage('ID ph√≤ng kh√¥ng h·ª£p l·ªá'),
  body('checkIn')
    .isISO8601()
    .withMessage('Ng√†y check-in kh√¥ng h·ª£p l·ªá'),
  body('checkOut')
    .isISO8601()
    .withMessage('Ng√†y check-out kh√¥ng h·ª£p l·ªá'),
  body('guests.adults')
    .optional()
    .custom((value) => {
      const num = parseInt(value);
      return !isNaN(num) && num >= 1 && num <= 10;
    })
    .withMessage('S·ªë ng∆∞·ªùi l·ªõn ph·∫£i t·ª´ 1-10'),
  body('guests.children')
    .optional()
    .custom((value) => {
      if (value === undefined || value === '') return true;
      const num = parseInt(value);
      return !isNaN(num) && num >= 0 && num <= 5;
    })
    .withMessage('S·ªë tr·∫ª em ph·∫£i t·ª´ 0-5'),
  body('status')
    .optional()
    .isIn(['pending', 'confirmed', 'checked_in', 'checked_out', 'cancelled', 'no_show'])
    .withMessage('Tr·∫°ng th√°i ƒë·∫∑t ph√≤ng kh√¥ng h·ª£p l·ªá'),
  body('payment.method')
    .isIn(['cash', 'card', 'bank_transfer', 'online'])
    .withMessage('Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá')
], async (req, res) => {
  try {
    console.log('üöÄ POST /api/bookings called');
    console.log('üìä Request body:', JSON.stringify(req.body, null, 2));
    
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      console.log('‚ùå Validation errors:', errors.array());
      return res.status(400).json({
        success: false,
        message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        errors: errors.array()
      });
    }
    
    const {
      customer,
      room,
      checkIn,
      checkOut,
      guests,
      payment,
      additionalServices = [],
      notes = {},
      bookingNumber,
      status = 'pending' // Th√™m status v·ªõi default l√† pending
    } = req.body;

    console.log('Backend received booking data:');
    console.log('- status:', status);
    console.log('- payment:', payment);
    console.log('- full req.body:', JSON.stringify(req.body, null, 2));
    
    // X√°c ƒë·ªãnh customer - n·∫øu admin/staff t·∫°o booking cho kh√°ch kh√°c th√¨ d√πng customer t·ª´ request, n·∫øu kh√¥ng th√¨ d√πng user hi·ªán t·∫°i
    let customerId = req.user._id; // M·∫∑c ƒë·ªãnh l√† user hi·ªán t·∫°i
    
    if (customer && (req.user.role === 'admin' || req.user.role === 'reception')) {
      // Admin/Staff c√≥ th·ªÉ t·∫°o booking cho kh√°ch kh√°c
      customerId = customer;
    }
    
    // Ki·ªÉm tra customer c√≥ t·ªìn t·∫°i kh√¥ng (n·∫øu kh√°c user hi·ªán t·∫°i)
    if (customerId !== req.user._id) {
      const customerData = await User.findById(customerId);
      if (!customerData) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng'
        });
      }
    }

    // Ki·ªÉm tra ph√≤ng c√≥ t·ªìn t·∫°i kh√¥ng
    const roomData = await Room.findById(room);
    if (!roomData) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ph√≤ng'
      });
    }
    
    console.log('üè® Room data found:', {
      _id: roomData._id,
      roomNumber: roomData.roomNumber,
      basePrice: roomData.basePrice,
      hourlyPrice: roomData.hourlyPrice,
      status: roomData.status
    });
    
    // Ki·ªÉm tra ph√≤ng c√≥ s·∫µn kh√¥ng
    if (roomData.status !== 'available') {
      return res.status(400).json({
        success: false,
        message: 'Ph√≤ng kh√¥ng c√≥ s·∫µn'
      });
    }
    
    // Ki·ªÉm tra xung ƒë·ªôt booking v·ªõi c√°c booking hi·ªán c√≥
    const conflictingBookings = await Booking.find({
      room: room,
      status: { $in: ['confirmed', 'checked_in'] },
      $or: [
        {
          checkIn: { $lt: new Date(checkOut) },
          checkOut: { $gt: new Date(checkIn) }
        }
      ]
    });
    
    if (conflictingBookings.length > 0) {
      return res.status(400).json({
        success: false,
        message: 'Ph√≤ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong kho·∫£ng th·ªùi gian n√†y',
        conflictingBookings: conflictingBookings.map(booking => ({
          bookingNumber: booking.bookingNumber,
          checkIn: booking.checkIn,
          checkOut: booking.checkOut,
          customer: booking.customer
        }))
      });
    }
    
    // Ki·ªÉm tra ng√†y check-in/check-out
    const checkInDate = new Date(checkIn);
    const checkOutDate = new Date(checkOut);
    const now = new Date();
    
    // Cho ph√©p ƒë·∫∑t ph√≤ng c√πng ng√†y (same-day booking)
    const today = new Date();
    today.setHours(0, 0, 0, 0); // Reset time to start of day
    checkInDate.setHours(0, 0, 0, 0); // Reset time to start of day
    
    if (checkInDate < today) {
      return res.status(400).json({
        success: false,
        message: 'Ng√†y check-in kh√¥ng th·ªÉ tr∆∞·ªõc ng√†y hi·ªán t·∫°i'
      });
    }
    
    // Cho ph√©p check-out c√πng ng√†y v·ªõi check-in (same-day booking)
    checkOutDate.setHours(0, 0, 0, 0); // Reset time to start of day
    
    if (checkOutDate < checkInDate) {
      return res.status(400).json({
        success: false,
        message: 'Ng√†y check-out kh√¥ng th·ªÉ tr∆∞·ªõc ng√†y check-in'
      });
    }
    
    // T√≠nh gi√° ph√≤ng
    const nights = Math.max(0, Math.ceil((checkOutDate - checkInDate) / (1000 * 60 * 60 * 24)));
    let roomPrice = 0;
    
    console.log(`üè® Room pricing calculation: nights=${nights}, checkIn=${checkIn}, checkOut=${checkOut}`);
    
    if (nights === 0) {
      // S·ª≠ d·ª•ng trong ng√†y - t√≠nh theo gi·ªù
      const checkInTime = req.body.checkInTime || '13:00';
      const checkOutTime = req.body.checkOutTime || '12:00';
      const checkInTimeObj = new Date(`${checkIn}T${checkInTime}`);
      const checkOutTimeObj = new Date(`${checkOut}T${checkOutTime}`);
      const hoursDiff = Math.max(1, Math.ceil((checkOutTimeObj - checkInTimeObj) / (1000 * 60 * 60)));
      
      console.log(`‚è∞ Time calculation: checkInTime=${checkInTime}, checkOutTime=${checkOutTime}, hoursDiff=${hoursDiff}`);
      
      const rates = roomData.hourlyPrice || {
        firstHour: 100000,
        additionalHour: 20000
      };
      
      console.log('üí∞ Hourly rates from room:', rates);
      
      if (hoursDiff === 1) {
        roomPrice = rates.firstHour;
      } else {
        roomPrice = rates.firstHour + (rates.additionalHour * (hoursDiff - 1));
      }
      
      console.log(`üí∞ Same-day pricing: ${hoursDiff} hours = ${roomPrice} VND`);
    } else {
      // Qua ƒë√™m - t√≠nh theo ƒë√™m
      roomPrice = roomData.basePrice * nights;
      console.log(`üí∞ Overnight pricing: ${nights} nights = ${roomPrice} VND`);
    }
    
    // T√≠nh gi√° d·ªãch v·ª• b·ªï sung
    let additionalServicesTotal = 0;
    if (additionalServices.length > 0) {
      // Logic t√≠nh gi√° d·ªãch v·ª• s·∫Ω ƒë∆∞·ª£c implement sau
      additionalServicesTotal = 0;
    }
    
    const totalAmount = roomPrice + additionalServicesTotal;
    
    // T·∫°o m√£ ƒë·∫∑t ph√≤ng t·ª± ƒë·ªông n·∫øu kh√¥ng c√≥ t·ª´ frontend
    const finalBookingNumber = bookingNumber || `BK${Date.now()}${Math.floor(Math.random() * 1000)}`;
    
    console.log('üìù Creating booking with data:', {
      bookingNumber: finalBookingNumber,
      customer: customerId,
      room,
      checkIn: checkInDate,
      checkOut: checkOutDate,
      guests,
      roomPrice,
      totalAmount,
      status,
      payment: {
        method: payment.method,
        amount: totalAmount,
        status: payment.status || 'pending'
      }
    });

    const booking = new Booking({
      bookingNumber: finalBookingNumber,
      customer: customerId, // S·ª≠ d·ª•ng customerId ƒë√£ x√°c ƒë·ªãnh
      room,
      checkIn: checkInDate,
      checkOut: checkOutDate,
      guests,
      payment: {
        method: payment.method,
        amount: totalAmount,
        status: payment.status || 'pending'
      },
      roomPrice,
      additionalServices,
      totalAmount,
      notes,
      status: status // Th√™m status t·ª´ request
    });
    
    try {
      console.log('üíæ Saving booking to database...');
      await booking.save();
      console.log('‚úÖ Booking saved successfully with ID:', booking._id);
    } catch (saveError) {
      console.error('‚ùå Error saving booking:', saveError);
      console.error('‚ùå Save error details:', {
        message: saveError.message,
        stack: saveError.stack,
        name: saveError.name
      });
      throw saveError;
    }
    
    // N·∫øu t·∫°o booking v·ªõi status checked_in ho·∫∑c checked_out, t·ª± ƒë·ªông t·∫°o checkInInfo/checkOutInfo
    try {
      if (status === 'checked_in') {
        await booking.performCheckIn(req.user._id, `Ph√≤ng ${roomData.roomNumber}`, [], null);
        console.log('‚úÖ Check-in performed');
      } else if (status === 'checked_out') {
        // Tr∆∞·ªõc ti√™n ph·∫£i check-in, r·ªìi m·ªõi check-out
        await booking.performCheckIn(req.user._id, `Ph√≤ng ${roomData.roomNumber}`, [], null);
        await booking.performCheckOut(req.user._id, 'good', [], null);
        console.log('‚úÖ Check-in and check-out performed');
      }
    } catch (checkError) {
      console.error('‚ùå Error performing check-in/out:', checkError);
      throw checkError;
    }
    
    console.log('Booking created with status:', booking.status);
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng d·ª±a tr√™n tr·∫°ng th√°i booking
    if (status === 'checked_in') {
      roomData.status = 'occupied';
      roomData.currentBooking = booking._id;
    } else if (status === 'confirmed') {
      roomData.status = 'reserved';
      roomData.currentBooking = booking._id;
    } else if (status === 'pending') {
      // Khi booking pending, ph√≤ng v·∫´n c√≥ th·ªÉ ƒë∆∞·ª£c ƒë·∫∑t nh∆∞ng c·∫ßn x√°c nh·∫≠n
      roomData.status = 'reserved';
      roomData.currentBooking = booking._id;
    } else {
      // cancelled ho·∫∑c c√°c status kh√°c
      roomData.status = 'available';
      roomData.currentBooking = null;
    }
    await roomData.save();
    
    // Populate ƒë·ªÉ tr·∫£ v·ªÅ ƒë·∫ßy ƒë·ªß th√¥ng tin
    try {
      console.log('üîÑ Starting booking populate...');
      await booking.populate([
        { path: 'customer', select: 'fullName email phone' },
        { path: 'room', select: 'roomNumber roomType basePrice hourlyPrice floor' }
      ]);
      console.log('‚úÖ Booking populated successfully');
      console.log('üìä Populated booking data:', {
        bookingNumber: booking.bookingNumber,
        customer: booking.customer,
        room: booking.room,
        status: booking.status
      });
    } catch (populateError) {
      console.error('‚ùå Error populating booking:', populateError);
      console.error('‚ùå Populate error details:', {
        message: populateError.message,
        stack: populateError.stack
      });
      throw populateError;
    }
    
    res.status(201).json({
      success: true,
      message: 'ƒê·∫∑t ph√≤ng th√†nh c√¥ng',
      data: { booking }
    });
    
  } catch (error) {
    console.error('Create booking error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi t·∫°o ƒë·∫∑t ph√≤ng'
    });
  }
});

// @route   PUT /api/bookings/:id/status
// @desc    C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·∫∑t ph√≤ng (Staff)
// @access  Private (Staff)
router.put('/:id/status', [
  authenticate,
  requireStaff,
  body('status')
    .optional()
    .isIn(['pending', 'confirmed', 'checked_in', 'checked_out', 'cancelled', 'no_show'])
    .withMessage('Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá'),
  body('reason')
    .optional()
    .trim()
    .isLength({ max: 200 })
    .withMessage('L√Ω do kh√¥ng ƒë∆∞·ª£c qu√° 200 k√Ω t·ª±'),
  body('customer')
    .optional()
    .isMongoId()
    .withMessage('ID kh√°ch h√†ng kh√¥ng h·ª£p l·ªá'),
  body('room')
    .optional()
    .isMongoId()
    .withMessage('ID ph√≤ng kh√¥ng h·ª£p l·ªá'),
  body('checkIn')
    .optional()
    .isISO8601()
    .withMessage('Ng√†y check-in kh√¥ng h·ª£p l·ªá'),
  body('checkOut')
    .optional()
    .isISO8601()
    .withMessage('Ng√†y check-out kh√¥ng h·ª£p l·ªá'),
  body('guests.adults')
    .optional()
    .custom((value) => {
      const num = parseInt(value);
      return !isNaN(num) && num >= 1 && num <= 10;
    })
    .withMessage('S·ªë ng∆∞·ªùi l·ªõn ph·∫£i t·ª´ 1-10'),
  body('guests.children')
    .optional()
    .custom((value) => {
      const num = parseInt(value);
      return !isNaN(num) && num >= 0 && num <= 5;
    })
    .withMessage('S·ªë tr·∫ª em ph·∫£i t·ª´ 0-5'),
  body('payment.method')
    .optional()
    .isIn(['cash', 'card', 'bank_transfer', 'online'])
    .withMessage('Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá'),
  body('payment.status')
    .optional()
    .isIn(['pending', 'paid', 'refunded', 'failed'])
    .withMessage('Tr·∫°ng th√°i thanh to√°n kh√¥ng h·ª£p l·ªá')
], async (req, res) => {
  try {
    console.log('PUT /api/bookings/:id/status called with ID:', req.params.id);
    console.log('Request body:', req.body);
    console.log('User:', req.user);
    
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      console.log('Validation errors:', errors.array());
      console.log('Request body for validation:', req.body);
      console.log('guests object:', req.body.guests);
      console.log('guests.adults type:', typeof req.body.guests?.adults);
      console.log('guests.children type:', typeof req.body.guests?.children);
      return res.status(400).json({
        success: false,
        message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        errors: errors.array()
      });
    }
    
    const { 
      status, 
      reason, 
      customer, 
      room, 
      checkIn, 
      checkOut, 
      guests, 
      payment,
      notes,
      totalAmount,
      roomPrice
    } = req.body;
    
    console.log('Extracted data:', { status, customer, room, checkIn, checkOut, guests, payment });
    
    const booking = await Booking.findById(req.params.id);
    
    if (!booking) {
      console.log('Booking not found with ID:', req.params.id);
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ph√≤ng'
      });
    }
    
    console.log('Found booking:', booking.bookingNumber, 'Current status:', booking.status);
    
    // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng ƒë∆∞·ª£c cung c·∫•p
    console.log('Updating booking fields...');
    if (customer) {
      console.log('Updating customer from', booking.customer, 'to', customer);
      booking.customer = customer;
    }
    if (room) {
      console.log('Updating room from', booking.room, 'to', room);
      booking.room = room;
    }
    if (checkIn) {
      console.log('Updating checkIn from', booking.checkIn, 'to', checkIn);
      booking.checkIn = new Date(checkIn);
    }
    if (checkOut) {
      console.log('Updating checkOut from', booking.checkOut, 'to', checkOut);
      booking.checkOut = new Date(checkOut);
    }
    if (guests) {
      console.log('Updating guests from', booking.guests, 'to', guests);
      booking.guests = guests;
    }
    if (payment) {
      console.log('Updating payment from', booking.payment, 'to', payment);
      booking.payment = { ...booking.payment, ...payment };
    }
    if (notes !== undefined) {
      console.log('Updating notes from', booking.notes, 'to', notes);
      booking.notes = notes;
    }
    if (totalAmount) {
      console.log('Updating totalAmount from', booking.totalAmount, 'to', totalAmount);
      booking.totalAmount = totalAmount;
    }
    if (roomPrice) {
      console.log('Updating roomPrice from', booking.roomPrice, 'to', roomPrice);
      booking.roomPrice = roomPrice;
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i n·∫øu c√≥
    if (status) {
      console.log('Updating status from', booking.status, 'to', status);
      await booking.updateStatus(status, req.user._id, reason);
    } else {
      console.log('Saving booking without status change...');
      await booking.save();
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng n·∫øu c·∫ßn
    if (status === 'cancelled' || status === 'no_show') {
      const roomData = await Room.findById(booking.room);
      if (roomData) {
        roomData.status = 'available';
        roomData.currentBooking = null;
        await roomData.save();
      }
    }
    
    // Populate ƒë·ªÉ tr·∫£ v·ªÅ ƒë·∫ßy ƒë·ªß th√¥ng tin
    console.log('Populating booking data...');
    await booking.populate([
      { path: 'customer', select: 'fullName email phone' },
      { path: 'room', select: 'roomNumber roomType basePrice hourlyPrice floor' }
    ]);
    
    console.log('Successfully updated booking:', booking.bookingNumber);
    res.json({
      success: true,
      message: 'C·∫≠p nh·∫≠t ƒë·∫∑t ph√≤ng th√†nh c√¥ng',
      data: { booking }
    });
    
  } catch (error) {
    console.error('Update booking status error:', error);
    console.error('Error stack:', error.stack);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·∫∑t ph√≤ng'
    });
  }
});

// @route   PUT /api/bookings/:id/check-in
// @desc    Check-in kh√°ch (Staff)
// @access  Private (Staff)
router.put('/:id/check-in', [
  authenticate,
  requireStaff,
  body('roomKey')
    .trim()
    .notEmpty()
    .withMessage('M√£ ph√≤ng l√† b·∫Øt bu·ªôc'),
  body('additionalGuests')
    .optional()
    .isArray()
    .withMessage('Danh s√°ch kh√°ch b·ªï sung ph·∫£i l√† array'),
  body('checkInTime')
    .optional()
    .matches(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/)
    .withMessage('Gi·ªù check-in kh√¥ng h·ª£p l·ªá (ƒë·ªãnh d·∫°ng HH:MM)')
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        errors: errors.array()
      });
    }
    
    const { roomKey, additionalGuests = [], checkInTime } = req.body;
    
    const booking = await Booking.findById(req.params.id);
    
    if (!booking) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ph√≤ng'
      });
    }
    
    if (booking.status !== 'confirmed') {
      return res.status(400).json({
        success: false,
        message: 'Ch·ªâ c√≥ th·ªÉ check-in ƒë·∫∑t ph√≤ng ƒë√£ x√°c nh·∫≠n'
      });
    }
    
    // Th·ª±c hi·ªán check-in v·ªõi gi·ªù t√πy ch·ªânh
    await booking.performCheckIn(req.user._id, roomKey, additionalGuests, checkInTime);
    
    res.json({
      success: true,
      message: 'Check-in th√†nh c√¥ng',
      data: { booking }
    });
    
  } catch (error) {
    console.error('Check-in error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi check-in'
    });
  }
});

// @route   PUT /api/bookings/:id/check-out
// @desc    Check-out kh√°ch (Staff)
// @access  Private (Staff)
router.put('/:id/check-out', [
  authenticate,
  requireStaff,
  body('roomCondition')
    .isIn(['good', 'damaged', 'needs_cleaning', 'needs_maintenance'])
    .withMessage('T√¨nh tr·∫°ng ph√≤ng kh√¥ng h·ª£p l·ªá'),
  body('checkOutTime')
    .optional()
    .matches(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/)
    .withMessage('Gi·ªù check-out kh√¥ng h·ª£p l·ªá (ƒë·ªãnh d·∫°ng HH:MM)')
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        errors: errors.array()
      });
    }
    
    const { roomCondition, damages = [], checkOutTime } = req.body;
    
    const booking = await Booking.findById(req.params.id);
    
    if (!booking) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ph√≤ng'
      });
    }
    
    if (booking.status !== 'checked_in') {
      return res.status(400).json({
        success: false,
        message: 'Ch·ªâ c√≥ th·ªÉ check-out kh√°ch ƒë√£ check-in'
      });
    }
    
    // Th·ª±c hi·ªán check-out v·ªõi gi·ªù t√πy ch·ªânh
    console.log('üïê Check-out with custom time:', checkOutTime);
    await booking.performCheckOut(req.user._id, roomCondition, damages, checkOutTime);
    console.log('‚úÖ CheckOutInfo after performCheckOut:', booking.checkOutInfo);
    console.log('üí∞ Updated totalAmount after checkout:', booking.totalAmount);
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng d·ª±a tr√™n t√¨nh tr·∫°ng ph√≤ng
    const room = await Room.findById(booking.room);
    if (room) {
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng d·ª±a tr√™n roomCondition
      switch (roomCondition) {
        case 'good':
          room.status = 'available';
          room.cleaningStatus = 'clean';
          break;
        case 'needs_cleaning':
          room.status = 'needs_cleaning';
          room.cleaningStatus = 'dirty';
          break;
        case 'needs_maintenance':
          room.status = 'maintenance';
          room.cleaningStatus = 'dirty';
          break;
        case 'damaged':
          room.status = 'out_of_order';
          room.cleaningStatus = 'dirty';
          break;
        default:
          room.status = 'cleaning'; // M·∫∑c ƒë·ªãnh c·∫ßn d·ªçn d·∫πp
          room.cleaningStatus = 'dirty';
      }
      room.currentBooking = null;
      await room.save();
    }
    
    // Populate ƒë·ªÉ tr·∫£ v·ªÅ ƒë·∫ßy ƒë·ªß th√¥ng tin
    await booking.populate([
      { path: 'customer', select: 'fullName email phone' },
      { path: 'room', select: 'roomNumber roomType basePrice hourlyPrice floor' }
    ]);
    
    console.log('Check-out response:', {
      bookingId: booking._id,
      status: booking.status,
      checkOutInfo: booking.checkOutInfo
    });
    
    res.json({
      success: true,
      message: 'Check-out th√†nh c√¥ng',
      data: { 
        booking, 
        checkOutInfo: booking.checkOutInfo,
        totalAmount: booking.totalAmount // Tr·∫£ v·ªÅ t·ªïng ti·ªÅn ƒë√£ ƒë∆∞·ª£c t√≠nh l·∫°i
      }
    });
    
  } catch (error) {
    console.error('Check-out error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi check-out'
    });
  }
});

// @route   PUT /api/bookings/:id/cancel
// @desc    H·ªßy ƒë·∫∑t ph√≤ng
// @access  Private
router.put('/:id/cancel', authenticate, async (req, res) => {
  try {
    const booking = await Booking.findById(req.params.id);
    
    if (!booking) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ph√≤ng'
      });
    }
    
    // Kh√°ch h√†ng ch·ªâ c√≥ th·ªÉ h·ªßy booking c·ªßa m√¨nh
    if (req.user.role === 'customer' && booking.customer.toString() !== req.user._id.toString()) {
      return res.status(403).json({
        success: false,
        message: 'B·∫°n ch·ªâ c√≥ th·ªÉ h·ªßy ƒë·∫∑t ph√≤ng c·ªßa ch√≠nh m√¨nh'
      });
    }
    
    // Ki·ªÉm tra c√≥ th·ªÉ h·ªßy kh√¥ng (ch·ªâ √°p d·ª•ng cho customer)
    if (req.user.role === 'customer' && !booking.canCancel) {
      return res.status(400).json({
        success: false,
        message: 'Kh√¥ng th·ªÉ h·ªßy ƒë·∫∑t ph√≤ng n√†y'
      });
    }
    
    // Admin/Staff c√≥ th·ªÉ h·ªßy b·∫•t k·ª≥ booking n√†o
    if (req.user.role !== 'customer' && (booking.status === 'checked_in' || booking.status === 'checked_out')) {
      return res.status(400).json({
        success: false,
        message: 'Kh√¥ng th·ªÉ h·ªßy ƒë·∫∑t ph√≤ng ƒë√£ check-in ho·∫∑c check-out'
      });
    }
    
    // H·ªßy ƒë·∫∑t ph√≤ng
    await booking.updateStatus('cancelled', req.user._id, 'Customer cancelled');
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng
    const room = await Room.findById(booking.room);
    if (room) {
      room.status = 'available';
      room.currentBooking = null;
      await room.save();
    }
    
    res.json({
      success: true,
      message: 'H·ªßy ƒë·∫∑t ph√≤ng th√†nh c√¥ng',
      data: { booking }
    });
    
  } catch (error) {
    console.error('Cancel booking error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi h·ªßy ƒë·∫∑t ph√≤ng'
    });
  }
});

// @route   DELETE /api/bookings/:id
// @desc    X√≥a ƒë·∫∑t ph√≤ng (ch·ªâ admin)
// @access  Private (Admin only)
router.delete('/:id', authenticate, async (req, res) => {
  try {
    console.log('DELETE /api/bookings/:id called with ID:', req.params.id);
    console.log('User:', req.user);
    
    const booking = await Booking.findById(req.params.id);
    
    if (!booking) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ph√≤ng'
      });
    }
    
    console.log('Found booking:', booking.bookingNumber, 'Status:', booking.status);

    // Cho ph√©p x√≥a t·∫•t c·∫£ tr·∫°ng th√°i tr·ª´ checked_in
    if (booking.status === 'checked_in') {
      return res.status(400).json({
        success: false,
        message: 'Kh√¥ng th·ªÉ x√≥a ƒë·∫∑t ph√≤ng ƒëang check-in'
      });
    }
    
    // X√≥a booking
    await Booking.findByIdAndDelete(req.params.id);
    
    console.log('Successfully deleted booking:', req.params.id);
    res.json({
      success: true,
      message: 'X√≥a ƒë·∫∑t ph√≤ng th√†nh c√¥ng'
    });
    
  } catch (error) {
    console.error('Delete booking error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi x√≥a ƒë·∫∑t ph√≤ng'
    });
  }
});

// @route   PUT /api/bookings/:id/payment-status
// @desc    C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
// @access  Private (Staff)
router.put('/:id/payment-status', [
  authenticate,
  requireStaff,
  body('status')
    .isIn(['pending', 'paid', 'refunded', 'failed'])
    .withMessage('Tr·∫°ng th√°i thanh to√°n kh√¥ng h·ª£p l·ªá')
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        errors: errors.array()
      });
    }
    
    const { status } = req.body;
    
    const booking = await Booking.findById(req.params.id);
    
    if (!booking) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ph√≤ng'
      });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
    booking.payment.status = status;
    await booking.save();

    res.json({
      success: true,
      message: `C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n th√†nh ${status === 'paid' ? 'ƒë√£ thanh to√°n' : 'ch·ªù thanh to√°n'}`,
      data: { booking }
    });
    
  } catch (error) {
    console.error('Update payment status error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n'
    });
  }
});

module.exports = router;
